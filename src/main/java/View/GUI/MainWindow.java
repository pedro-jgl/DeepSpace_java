/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View.GUI;
import View.DeepSpaceView;
import java.util.ArrayList;
import controller.Controller;
import deepspace.GameState;
import javax.swing.JOptionPane;

/**
 *
 * @author pedrojgl
 */
public class MainWindow extends javax.swing.JFrame implements DeepSpaceView {
    private static String appName = "deepspace";
    private static MainWindow instance = null;
    private SpaceStationView stationView;
    private EnemyStarShipView enemyView;

    
    public static MainWindow getInstance () {
        if (instance == null) {
            instance = new MainWindow();
        }return instance;
    }

    
    /**
     * Creates new form MainWindow
     */
    private MainWindow() {
        initComponents();
        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        
        stationView = new SpaceStationView();
        enemyView = new EnemyStarShipView();
        
        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(java.awt.event.WindowEvent e) {
                Controller.getInstance().finish(0);
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        station_panel = new javax.swing.JPanel();
        enemy_panel = new javax.swing.JPanel();
        combat_button = new javax.swing.JButton();
        nextturn_button = new javax.swing.JButton();
        salir_button = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        station_panel.setPreferredSize(new java.awt.Dimension(700, 730));

        combat_button.setText("COMBATIR");
        combat_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combat_buttonActionPerformed(evt);
            }
        });

        nextturn_button.setText("Siguiente Turno");
        nextturn_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextturn_buttonActionPerformed(evt);
            }
        });

        salir_button.setText("Salir");
        salir_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salir_buttonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(station_panel, javax.swing.GroupLayout.PREFERRED_SIZE, 690, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(nextturn_button)
                        .addGap(73, 73, 73)
                        .addComponent(salir_button, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(combat_button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(enemy_panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(21, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(station_panel, javax.swing.GroupLayout.PREFERRED_SIZE, 750, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(enemy_panel, javax.swing.GroupLayout.PREFERRED_SIZE, 666, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(combat_button, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(nextturn_button)
                            .addComponent(salir_button))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void combat_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combat_buttonActionPerformed
        // TODO add your handling code here:
        Controller.getInstance().combat();
        updateView();
        revalidate();

    }//GEN-LAST:event_combat_buttonActionPerformed

    private void nextturn_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextturn_buttonActionPerformed
        // TODO add your handling code here:
        Controller.getInstance().nextTurn();
        updateView();
        revalidate();
        
    }//GEN-LAST:event_nextturn_buttonActionPerformed

    private void salir_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salir_buttonActionPerformed
        // TODO add your handling code here:
        Controller.getInstance().finish(0);
        
    }//GEN-LAST:event_salir_buttonActionPerformed

    /**
     * @param args the command line arguments
     * Este método se podrá eliminar más adelante y utilizar nuestra implementación
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }
    
    @Override
    public void updateView() {
        stationView.setSpaceStationView(Controller.getInstance().getUIversion().getCurrentStation());
        station_panel.add(stationView);
        enemyView.setEnemyView(Controller.getInstance().getUIversion().getCurrentEnemy());
        enemy_panel.add(enemyView);
        GameState state = Controller.getInstance().getState();
        
        //dependiendo del estado se mostrará una cosa u otra              
        switch (state) {
            case INIT :
                nextturn_button.setEnabled(false);
                nextturn_button.setOpaque(false);
                combat_button.setEnabled(true);
                combat_button.setOpaque(true);
                break;
                
            case BEFORECOMBAT :
                nextturn_button.setEnabled(false);
                nextturn_button.setOpaque(false);
                combat_button.setEnabled(true);
                combat_button.setOpaque(true);
                break;
            case AFTERCOMBAT :
                nextturn_button.setEnabled(true);
                nextturn_button.setOpaque(true);
                combat_button.setEnabled(false);
                combat_button.setOpaque(false);
                break;
                
            }  
        
        repaint();
    }

    @Override
    public void showView() {
        this.setVisible(true);
    }

    @Override
    public ArrayList<String> readNamePlayers() {
        NamesCapture namesCapt = new NamesCapture(this);
        return namesCapt.getNames();
    }

    /**
     * @brief Pregunta al usuario si quiere salir del programa
     * @return TRUE si quiere salir | FALSE en otro caso
     */
    @Override
    public boolean confirmExitMessage() {
        return (JOptionPane.showConfirmDialog(this, "¿Estás segur@ que deseas salir?", getAppName(), JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION);
    }
    
    /**
     * @brief Muestra por pantalla una ventana indicando que no se puede avanzar de turno
     */
    @Override
    public void nextTurnNotAllowedMessage() {
        JOptionPane.showMessageDialog(this, "No puedes avanzar de turno, \nno has cumplido tu castigo.", getAppName(), JOptionPane.ERROR_MESSAGE);
    }

    /**
     * @brief Muestra por pantalla una ventana indicando que se ha perdido el combate
     */
    @Override
    public void lostCombatMessage() {
        JOptionPane.showMessageDialog(this, "Has PERDIDO el combate. \nCumple tu castigo.", getAppName(), JOptionPane.INFORMATION_MESSAGE);
    }

    /**
     * @brief Muestra por pantalla una ventana indicando que se ha huido del combate
     */
    @Override
    public void escapeMessage() {
        JOptionPane.showMessageDialog(this, "Has logrado ESCAPAR. \nEres un gallina espacial.", getAppName(), JOptionPane.INFORMATION_MESSAGE);
    }
    
    /**
     * @brief Muestra por pantalla una ventana indicando que se ha ganado el combate
     */
    @Override
    public void wonCombatMessage() {
        JOptionPane.showMessageDialog(this, "Has GANADO el combate. \nDisfruta de tu botín.", getAppName(), JOptionPane.INFORMATION_MESSAGE);
    }
    
    /**
     * @brief Muestra por pantalla una ventana indicando que se ha ganado el juego
     */
    @Override
    public void wonGameMessage() {
        JOptionPane.showMessageDialog(this, "ENHORABUENA!!. \nHas ganado el juego!!.", getAppName(), JOptionPane.INFORMATION_MESSAGE);
    }
    
    /**
     * @brief Muestra por pantalla una ventana indicando que se ha ganado y además que se ha transformado a estación eficiente o a ciudad espacial
     */
    @Override
    public void wonAndConvertCombatMessage() {
        if(Controller.getInstance().getUIversion().getCurrentEnemy().getLoot().isGetEfficient()){
            JOptionPane.showMessageDialog(this, "Has GANADO el combate. \nAdemás te has CONVERTIDO en una estación EFICIENTE. \nDisfruta de tu botín.", getAppName(), JOptionPane.INFORMATION_MESSAGE);
        }
        else{
            JOptionPane.showMessageDialog(this, "Has GANADO el combate. \nAdemás te has CONVERTIDO en una CIUDAD ESPACIAL. \nDisfruta de tu botín.", getAppName(), JOptionPane.INFORMATION_MESSAGE);
        }
    }

    /**
     * @brief Muestra un mensaje indicando que no se puede combatir en este momento
     */
    @Override
    public void noCombatMessage() {
        JOptionPane.showMessageDialog(this, "No puedes combatir en este momento.", getAppName(), JOptionPane.ERROR_MESSAGE);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton combat_button;
    private javax.swing.JPanel enemy_panel;
    private javax.swing.JButton nextturn_button;
    private javax.swing.JButton salir_button;
    private javax.swing.JPanel station_panel;
    // End of variables declaration//GEN-END:variables

    private String getAppName() {
        return appName;
    }
}
